akka{

  http.server.parsing.max-content-length=104857600
  #loglevel = DEBUG
  persistence {
    # Absolute path to the default journal plugin configuration entry.
    journal.plugin = "akka.persistence.journal.inmem"
#    journal.plugin = "akka.persistence.journal.leveldb"
    # Absolute path to the default snapshot store plugin configuration entry.
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"


    # Configuration for the LeveldbReadJournal
    query.journal.leveldb {
      # Implementation class of the LevelDB ReadJournalProvider
      class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

      # Absolute path to the write journal plugin configuration entry that this
      # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
      # If undefined (or "") it will connect to the default journal as specified by the
      # akka.persistence.journal.plugin property.
      write-plugin = "journal"

      # The LevelDB write journal is notifying the query side as soon as things
      # are persisted, but for efficiency reasons the query side retrieves the events
      # in batches that sometimes can be delayed up to the configured `refresh-interval`.
      refresh-interval = 3s

      # How many events to fetch in one query (replay) and keep buffered until they
      # are delivered downstreams.
      max-buffer-size = 100
    }
  }
  actor {
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
//      "com.github.sorhus.webalytics.akka.model.Command" = kryo
      "com.github.sorhus.webalytics.akka.model.Event" = kryo
//      "com.github.sorhus.webalytics.akka.model.Model" = kryo
    }

    kryo  {
      type = "nograph"
      idstrategy = "explicit"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "off"

      implicit-registration-logging = true

      mappings {
        "com.github.sorhus.webalytics.akka.model.Bucket"=21
        "com.github.sorhus.webalytics.akka.model.Dimension"=22
        "com.github.sorhus.webalytics.akka.model.DocumentId"=23
        "com.github.sorhus.webalytics.akka.model.Element"=24
        "com.github.sorhus.webalytics.akka.model.ElementId"=25
        "com.github.sorhus.webalytics.akka.model.PostEvent"=26
        "com.github.sorhus.webalytics.akka.model.Value"=27
        "scala.collection.immutable.HashMap$HashTrieMap"=28
        "scala.collection.immutable.HashSet$HashTrieSet"=29
        "scala.collection.immutable.Map$EmptyMap$"=30
        "scala.collection.immutable.Map$Map1"=31
        "scala.collection.immutable.Set$EmptySet$"=32
        "scala.collection.immutable.Set$Set1"=33
        "scala.collection.immutable.Set$Set2"=34
        "scala.collection.immutable.Set$Set3"=35
        "scala.collection.immutable.Set$Set4"=36
      }

      kryo-trace = false
    }
  }
}

extensions = [
  "com.romix.akka.serialization.kryo.KryoSerializationExtension$"
]

